{"version":3,"sources":["dataMethods/occupancy.js","containers/DayBarChart.js","containers/Navbar/Navbar.js","pages/ByDay.js","containers/HourBarChart.js","pages/ByHour.js","App.js","serviceWorker.js","index.js"],"names":["fetchOccupancyData","a","axios","get","process","then","res","data","console","error","batchOccupancyByDay","days","times","forEach","o","day","dateEarlier","dateLater","dayEarlier","toArray","dayLater","daysInMonth","dateDiff","moment","tz","timestamp","push","map","sortBy","batchOccupancyByHour","hours","hour","dateDiffByHour","exportOccupancyData","batch","occupied","total","key","isOccupied","percent","round","GraphArea","styled","div","BarChartByDay","state","labels","this","getUpdatedData","setState","datasets","label","backgroundColor","color","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","React","Component","Header","Layout","NavBar","handleClick","e","current","className","theme","mode","defaultSelectedKeys","selectedKeys","onClick","style","lineHeight","Item","href","rel","Title","Typography","BarChartWrapper","ByDayPage","textAlign","paddingTop","level","BarChartByHour","log","ByHourPage","App","path","component","BarChartbyDay","BarChartbyHour","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d443b2e3.chunk.js","sourcesContent":["import { times, forEach, map, sortBy, round } from 'lodash';\r\nimport moment from 'moment-timezone';\r\nimport axios from 'axios';\r\n\r\nexport const fetchOccupancyData = async () => {\r\n  try {\r\n    return axios.get(process.env.REACT_APP_API_URL).then(res => res.data)\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport const dateDiff = (dateEarlier, dateLater) => {\r\n  // moment.toArray() here parses into [ year, month, day, hours, mins, seconds, milliseconds ]\r\n  const dayEarlier = dateEarlier.toArray()[2]\r\n  const dayLater = dateLater.toArray()[2]\r\n\r\n  if (dayLater < dayEarlier) {\r\n    return dayLater + dateEarlier.daysInMonth() - dayEarlier;\r\n  }\r\n  return dayLater - dayEarlier;\r\n}\r\n\r\nexport const dateDiffByHour = (dateEarlier, dateLater) => {\r\n  // moment.toArray() here parses into [ year, month, day, hours, mins, seconds, milliseconds ]\r\n  const dayEarlier = dateEarlier.toArray()[3]\r\n  const dayLater = dateLater.toArray()[3]\r\n\r\n  if (dayLater < dayEarlier) {\r\n    return dayLater + 24 - dayEarlier;\r\n  }\r\n  return dayLater - dayEarlier;\r\n}\r\n\r\n/**\r\n * Takes in occupancy batches data by day in a week\r\n */\r\nexport const batchOccupancyByDay = (data) => {\r\n  const daysInPeriod = 7;\r\n  const days = times(daysInPeriod, () => []);\r\n  forEach(data, o => {\r\n    // Monday\r\n    const day = (dateDiff(moment([2019, 10, 28, 8]).tz('Asia/Singapore'), moment(o.timestamp).tz('Asia/Singapore'))) % 7;\r\n    days[day].push(o);\r\n  })\r\n  return map(days, (day) => sortBy(day, ['timestamp', 'rpiId']));\r\n}\r\n\r\n/**\r\n * Takes in occupancy batches data by hour in a week\r\n */\r\nexport const batchOccupancyByHour = (data) => {\r\n  const hoursInPeriod = 24;\r\n  const hours = times(hoursInPeriod, () => []);\r\n  forEach(data, o => {\r\n    const hour = (dateDiffByHour(moment([2019, 10, 28, 8]).tz('Asia/Singapore'), moment(o.timestamp).tz('Asia/Singapore'))) % 24;\r\n    hours[hour].push(o);\r\n  })\r\n  return map(hours, (hour) => sortBy(hour, ['timestamp', 'rpiId']));\r\n}\r\n\r\n/**\r\n * Takes in occupancy batches can calculate percentage occupied\r\n */\r\nexport const exportOccupancyData = (batch) => {\r\n  let occupied = 0\r\n  let total = 1 \r\n  return map(batch,  key => {\r\n    forEach(key, o => {\r\n      if (o.isOccupied)\r\n        occupied += 1\r\n      total += 1\r\n    })\r\n    let percent = occupied/total\r\n    occupied = 0\r\n    total = 1\r\n    return round(percent, 2)\r\n  })\r\n}","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport color from 'rcolor';\r\nimport styled from 'styled-components';\r\n\r\nimport { \r\n\tfetchOccupancyData, batchOccupancyByDay, exportOccupancyData \r\n} from '../dataMethods/occupancy';\r\n\r\nconst GraphArea = styled.div`\r\n\twidth: 1000px;\r\n\theight: 600px;\r\n`\r\n\r\nclass BarChartByDay extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tlabels: ['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun']\r\n\t\t};\r\n\t}\r\n\r\n\tasync getUpdatedData() {\r\n\t\tconst data = await fetchOccupancyData();\r\n\t\treturn exportOccupancyData(batchOccupancyByDay(data));\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getUpdatedData().then(data => this.setState({\r\n\t\t\tdatasets: [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Room Occupancy by Day',\r\n\t\t\t\t\tbackgroundColor: color(),\r\n\t\t\t\t\tborderColor: color(),\r\n\t\t\t\t\tborderWidth: 1,\r\n\t\t\t\t\thoverBackgroundColor: color(),\r\n\t\t\t\t\thoverBorderColor: color(),\r\n\t\t\t\t\tdata\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<GraphArea>\r\n\t\t\t\t<Bar data={this.state}/>\r\n\t\t\t</GraphArea>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BarChartByDay;","import React from 'react';\r\nimport { Menu, Layout } from 'antd';\r\nimport './Navbar.css'\r\n\r\nconst { Header } = Layout;\r\n\r\nexport class NavBar extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = { current: 1 }\r\n    }\r\n\r\n    handleClick = e => {\r\n        this.setState({\r\n          current: e.key,\r\n        });\r\n      };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Layout>\r\n                    <Header>\r\n                    <div className=\"logo\"/>\r\n                    <Menu\r\n                        theme=\"dark\"\r\n                        mode=\"horizontal\"\r\n                        defaultSelectedKeys={[\"1\"]}\r\n                        selectedKeys={[this.state.current]}\r\n                        onClick={this.handleClick}\r\n                        style={{ lineHeight: '64px' }}\r\n                    >\r\n                        <Menu.Item key=\"1\">\r\n                        <a href=\"/day\" rel=\"noopener noreferrer\">\r\n                            By Day\r\n                        </a>    \r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\">\r\n                            <a href=\"/hour\" rel=\"noopener noreferrer\">\r\n                                By Hour\r\n                            </a>   \r\n                        </Menu.Item>\r\n                    </Menu>\r\n                    </Header>\r\n                </Layout>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BarChartbyDay from '../containers/DayBarChart';\r\nimport { NavBar } from '../containers/Navbar/Navbar';\r\n\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\n\r\nconst BarChartWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-top: 5rem;\r\n`\r\n\r\nconst ByDayPage = () => {\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            <Typography style={{textAlign: 'center', paddingTop: '5rem'}}>\r\n                <Title level={3}>A project brought to you by Team Dynalite.</Title>\r\n            </Typography>\r\n            <BarChartWrapper> \r\n                <BarChartbyDay />\r\n            </BarChartWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ByDayPage;","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport color from 'rcolor';\r\nimport styled from 'styled-components';\r\n\r\nimport { \r\n\tfetchOccupancyData, batchOccupancyByHour, exportOccupancyData \r\n} from '../dataMethods/occupancy';\r\n\r\nconst GraphArea = styled.div`\r\n\twidth: 1000px;\r\n\theight: 600px;\r\n`\r\n\r\nclass BarChartByHour extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tlabels: ['12am', '1am', '2am', '3am', '4am', '5am', '6am', '7am', '8am', '9am', '10am', '11am',\r\n\t\t\t\t\t '12pm', '1pm', '2pm', '3pm', '4pm', '5pm', '6pm', '7pm', '8pm', '9pm', '10pm', '11pm'\r\n\t\t\t\t\t]\r\n\t\t};\r\n\t}\r\n\r\n\tasync getUpdatedData() {\r\n\t\tconst data = await fetchOccupancyData();\r\n\t\tconsole.log(batchOccupancyByHour(data))\r\n\t\treturn exportOccupancyData(batchOccupancyByHour(data));\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getUpdatedData().then(data => this.setState({\r\n\t\t\tdatasets: [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Room Occupancy by Hour',\r\n\t\t\t\t\tbackgroundColor: color(),\r\n\t\t\t\t\tborderColor: color(),\r\n\t\t\t\t\tborderWidth: 1,\r\n\t\t\t\t\thoverBackgroundColor: color(),\r\n\t\t\t\t\thoverBorderColor: color(),\r\n\t\t\t\t\tdata\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<GraphArea>\r\n\t\t\t\t<Bar data={this.state}/>\r\n\t\t\t</GraphArea>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BarChartByHour;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BarChartbyHour from '../containers/HourBarChart';\r\nimport { NavBar } from '../containers/Navbar/Navbar';\r\n\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\n\r\nconst BarChartWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-top: 5rem;\r\n`\r\n\r\nconst ByHourPage = () => {\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            <Typography style={{textAlign: 'center', paddingTop: '5rem'}}>\r\n                <Title level={3}>A project brought to you by Team Dynalite.</Title>\r\n            </Typography>\r\n            <BarChartWrapper> \r\n                <BarChartbyHour />\r\n            </BarChartWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ByHourPage;","import React, { Component } from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport BarChartbyDay from './pages/ByDay';\r\nimport BarChartbyHour from './pages/ByHour';\r\nimport 'antd/dist/antd.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    // TODO: Get name and version from env\r\n    console.log('Dynalite client: v0.1.0');\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path={`${process.env.REACT_APP_BASENAME}day`} component={BarChartbyDay}/>\r\n          <Route path={`${process.env.REACT_APP_BASENAME}hour`} component={BarChartbyHour}/>\r\n          <Route component={BarChartbyDay} /> \r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}